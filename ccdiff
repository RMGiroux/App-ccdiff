#!/pro/bin/perl

use 5.18.2;
use warnings;

our $VERSION = "0.08 - 20180802";
our $CMD     = $0 =~ s{.*/}{}r;

sub usage {
    my $err = shift and select STDERR;
    say "usage: $CMD [options] file1 [file2]";
    say "	file1 or file2 can be - (but not both)";
    say "   -V    --version      Show version and exit";
    say "  Diff options:";
    say "   -U    --utf-8                 Input is in UTF-8";
    say "   -u[3] --unified=3             Show a unified diff";
    say "   -w    --ignore-all-space      Ignore all whitespace";
    say "   -b    --ignore-space-change   Ignore horizontal whitespace changes";
    say "   -Z    --ignore-trailing-space Ignore whitespace at line ending";
    say "   -i    --ignore-case           Ignore case changes";
    say "  Color options:";
    say "         --no-color     Do not use colors";
    say "         --old=red      Color to indicate removed content";
    say "         --new=green    Color to indicate added   content";
    say "         --bg=white     Background color for colored indicators";
    say "   -p    --pink         Shortcut for --old=magenta";
    say "   -f    --fancy        Use Unicode indicators instead of ^";
    say "   -r    --reverse      Reverse the colors of the indicators";
    exit $err;
    } # usage

use Algorithm::Diff;
use Term::ANSIColor qw(:constants color);
use Getopt::Long qw(:config bundling);
GetOptions (
    "help|?"		=> sub { usage (0); },
    "V|version"		=> sub { say "$CMD [$VERSION]"; exit 0; },

    "U|utf-8!"		=> \ my $opt_U,

    "u|unified:3"	=> \ my $opt_u,

    "c|color!"		=> \(my $opt_c = 1),
    "p|pink!"		=> \ my $opt_p,
    "r|reverse!"	=> \ my $opt_r,
    "f|fancy!"		=> \ my $opt_f,

    "i|ignore-case!"			=> \ my $opt_i,
    "w|ignore-all-space!"		=> \ my $opt_w,
    "b|ignore-ws|ignore-space-change!"	=> \ my $opt_b,
    "Z|ignore-trailing-space!"		=> \ my $opt_Z,
    "E|ignore-tab-expansion!"		=> \ my $opt_E, # NYI
    "B|ignore-blank-lines!"		=> \ my $opt_B, # NYI

      "old=s"		=> \(my $old_color = "red"),
      "new=s"		=> \(my $new_color = "green"),
      "bg=s"		=> \(my $rev_color = "white"),

    "v|verbose:1"	=> \(my $opt_v = 0),
    ) or usage (1);
$opt_w and $opt_b = $opt_Z = $opt_E = $opt_B = 1;

# Color initialization
$opt_p and $old_color = "magenta";
my %clr = map { $_ => color ($_) } map { $_, "on_$_" }
    qw( red green blue black white cyan magenta yellow );
my $clr_red = $clr{$old_color};
my $clr_grn = $clr{$new_color};
my $clr_rev = $clr{$rev_color};
my $reset   = RESET;

my $clr_old = $opt_r ? $clr_rev . $clr{"on_$old_color"}
                     : $clr_red . $clr{"on_$rev_color"};
my $clr_new = $opt_r ? $clr_rev . $clr{"on_$new_color"}
                     : $clr_grn . $clr{"on_$rev_color"};
# Indicators
my $chr_old = $opt_f ? $clr_old . "\x{25bc}$reset" : "^";
my $chr_new = $opt_f ? $clr_new . "\x{25b2}$reset" : "^";
my $chr_eql = " ";
my $chr_lft = defined $opt_u ? "-" : "<";
my $chr_rgt = defined $opt_u ? "+" : "<";

binmode STDOUT, ":encoding(utf-8)";

my $f1 = shift or usage (1);
my $f2 = shift // "-";

$f1 eq "-" && $f2 eq "-" and usage (1);

$opt_U and binmode STDIN,  ":encoding(utf-8)";
$opt_U and binmode STDOUT, ":encoding(utf-8)";

my @d1 = $f1 eq "-" ? <> : do {
    open my $fh, "<", $f1 or die "$f1: $!\n";
    $opt_U and binmode $fh, ":encoding(utf-8)";
    <$fh>;
    };
my @d2 = $f2 eq "-" ? <> : do {
    open my $fh, "<", $f2 or die "$f2: $!\n";
    $opt_U and binmode $fh, ":encoding(utf-8)";
    <$fh>;
    };

my $cmp_sub = $opt_i || $opt_b || $opt_Z ? { keyGen => sub {
    my $line = shift;
    $opt_i and $line = lc $line;
    $opt_Z and $line =~ s/[ \t]+$//g;
    $opt_b and $line =~ s/[ \t]+/ /g;
    return $line;
    }} : undef;

my $diff = Algorithm::Diff->new (\@d1, \@d2, $cmp_sub);
$diff->Base (1);

my ($N, @s) = (0, 0);
while ($diff->Next) {
    $N++;
    if ($diff->Same) {
	if (defined $opt_u) {
	    @s = $diff->Items (1);
	    $N > 1 and print "  $_" for grep { defined } @s[0..($opt_u - 1)];
	    unshift @s, undef while @s < $opt_u;
	    }
	next;
	}
    my $sep = "";
    my @d = map {[ $diff->Items ($_) ]} 1, 2;
    if (!@{$d[1]}) {
	printf "%d,%dd%d\n", $diff->Get (qw( Min1 Max1 Max2 ));
	if ($opt_c) {
	    $_ = $clr_old . (s/$/$reset/r) for @{$d[0]}
	    }
	}
    elsif (!@{$d[0]}) {
	printf "%da%d,%d\n", $diff->Get (qw( Max1 Min2 Max2 ));
	if ($opt_c) {
	    $_ = $clr_new . (s/$/$reset/r) for @{$d[1]}
	    }
	}
    else {
	$sep = "---\n" unless defined $opt_u;
	printf "%d,%dc%d,%d\n", $diff->Get (qw( Min1 Max1 Min2 Max2 ));
	@d = subdiff (@d);
	}
    if ($opt_u) {
	print "  $_" for grep { defined } map { $s[$#s - $opt_u + $_] } 1..$opt_u;
	}
    print "$chr_lft $_" for @{$d[0]};
    print $sep;
    print "$chr_rgt $_" for @{$d[1]};
    }

sub subdiff {
    my $d = Algorithm::Diff->new (map { [ map { split m// } @$_ ] } @_);
    my ($d1, $d2, $x1, $x2) = ("", "", "", "");
    while ($d->Next) {
	my @c = map {[ $d->Items ($_) ]} 1, 2;
	if ($d->Same) {
	    $d1 .= $_ for @{$c[0]};
	    $d2 .= $_ for @{$c[1]};
	    $x1 .= $_ for map { s/\S/$chr_eql/gr } @{$c[0]};
	    $x2 .= $_ for map { s/\S/$chr_eql/gr } @{$c[0]};
	    next;
	    }
	if (@{$c[0]}) {
	    $d1 .= $clr_old if $opt_c;
	    $d1 .= $_ for @{$c[0]};
	    $d1 .= $reset		if $opt_c;
	    $x1 .= $_ for map { s/\S/$chr_old/gr } @{$c[0]};
	    }
	if (@{$c[1]}) {
	    $d2 .= $clr_new if $opt_c;
	    $d2 .= $_ for @{$c[1]};
	    $d2 .= $reset		if $opt_c;
	    $x2 .= $_ for map { s/\S/$chr_new/gr } @{$c[1]};
	    }
	}
    my @d = map { [ split m/(?<=\n)/ => $_ ] } $d1, $d2;
    $opt_c and return @d;

    my @x = map { [ split m/(?<=\n)/ => $_ ] } $x1, $x2;
    foreach my $n (0, 1) {
	$d[$n] = [ map { $d[$n][$_], $x[$n][$_] // "" } 0 .. (scalar @{$d[$n]} - 1) ];
	}
    @d;
    } # subdiff
